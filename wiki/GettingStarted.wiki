#summary Writing "Hello World" in GuiceBerry

=Getting Started=
We're developing a web app that lets consumers order pizza. It's a pretty standard setup: it uses a database to store the pizza orders and a webserver to talk to the customers' browsers. We'll test that the app works as desired from the customer's perspective: it'll drive a webbrowser through the site to order a pizza. Since we're not actually going to bake a pizza each time the test case is run, we'll verify that the order was successful by inspecting the backend database.
{{{
import junit.framework.TestCase;

public class OrderPizzaTest extends TestCase {
  
  public void testOrderPizza() {
    // TODO
    // 1. open our pizza-ordering web app in a browser
    // 2. select a medium vegan pizza
    // 3. enter the delivery address
    // 4. click buy
    // 5. make sure the order shows up in the database
    fail("this test still needs to be written!");
  }
}
}}}
As is traditional with functional tests, there are many moving parts in even the simplest of use-cases. Before we can start writing the test's code, we need to launch an instance of the app to test against. In GuiceBerry terms, this is called the GuiceBerry environment.

==Creating a GuiceBerry Environment==
The *GuiceBerry environment* is a Guice module that subclasses `GuiceBerryJunit3Env`. It prepares our application, its dependencies, and infrastructure for the test. In most applications, a single GuiceBerry environment is shared by all functional tests. 

The primary job of the GuiceBerry environment is to bind an implementation for the `GuiceBerryEnvMain` interface. When this `Runnable`-like interface is bound, it will be executed before any tests.
{{{
import com.google.inject.testing.guiceberry.junit3.GuiceBerryJunit3Env;
import com.google.inject.testing.guiceberry.GuiceBerryEnvMain;

public class PizzaAppGuiceBerryEnv extends GuiceBerryJunit3Env {

  @Override
  protected void configure() {
    super.configure();
    bind(GuiceBerryEnvMain.class).to(PizzaAppMain.class);
  }

  static class PizzaAppMain implements GuiceBerryEnvMain {
    public void run() {
      DatabaseRunner databaseRunner = new DatabaseRunner();
      databaseRunner.setPort(3306);
      databaseRunner.startAndWait(); // returns once the database is ready

      PizzaOrderApp pizzaOrderApp = new PizzaOrderApp();
      pizzaOrderApp.setDatabaseAddress("localhost", 3306);
      pizzaOrderApp.setHttpPort(80);
      pizzaOrderApp.startAndWait(); // returns once the web server is ready
    }
  }
}
}}}

==Linking the test to its GuiceBerry Environment==


